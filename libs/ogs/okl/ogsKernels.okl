/*

The MIT License (MIT)

Copyright (c) 2017-2022 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

// OCCA properties will define T, OGS_OP_INIT, and OGS_OP

/*------------------------------------------------------------------------------
  The basic gather-scatter kernel
------------------------------------------------------------------------------*/
#if 0
//OCCA_USE_DPCPP!=1
// Original version
@kernel void gatherScatter(const dlong Ngather,
			   const dlong Nblocks,
                           const int K,
			   @restrict const dlong *blockStarts,
			   @restrict const dlong *gatherStarts,
			   @restrict const dlong *gatherIds,
			   @restrict const dlong *scatterStarts,
			   @restrict const dlong *scatterIds,
			   @restrict           T *q) {
  
  for(dlong k=0;k<K;++k;@outer(1)){
    for(dlong b=0;b<Nblocks;++b;@outer(0)){
      @exclusive dlong blockStart, blockEnd, gStart, sStart;
      @shared T gtemp[p_gatherNodesPerBlock];
      @shared T stemp[p_gatherNodesPerBlock];

      for(dlong n=0;n<p_blockSize;++n;@inner(0)){
        blockStart = blockStarts[b];
        blockEnd   = blockStarts[b+1];
        gStart = gatherStarts[blockStart];
        sStart = scatterStarts[blockStart];

        for (dlong id=gStart+n;id<gatherStarts[blockEnd];id+=p_blockSize) {
          gtemp[id-gStart] = q[k+gatherIds[id]*K];
        }
      }

      for(dlong n=0;n<p_blockSize;++n;@inner(0)){
        for (dlong row=blockStart+n;row<blockEnd;row+=p_blockSize) {
          const dlong gRowStart = gatherStarts[row]  -gStart;
          const dlong gRowEnd   = gatherStarts[row+1]-gStart;
          const dlong sRowStart = scatterStarts[row]  -sStart;
          const dlong sRowEnd   = scatterStarts[row+1]-sStart;
          T gq = OGS_OP_INIT;
          for (dlong i=gRowStart;i<gRowEnd;i++) {
            OGS_OP(gq,gtemp[i]);
          }
          for (dlong i=sRowStart;i<sRowEnd;i++) {
            stemp[i] = gq;
          }
        }
      }

      for(dlong n=0;n<p_blockSize;++n;@inner(0)){
        for (dlong id=sStart+n;id<scatterStarts[blockEnd];id+=p_blockSize) {
          q[k+scatterIds[id]*K] = stemp[id-sStart];
        }
      }
    }
  }
}
#endif


#if 0
// updated version 10/23, simplified
// GOOD !
@kernel void gatherScatter(const dlong Ngather,
			   const dlong Nblocks,
                           const int K,
			   @restrict const dlong *blockStarts,
			   @restrict const dlong *gatherStarts,
			   @restrict const dlong *gatherIds,
			   @restrict const dlong *scatterStarts,
			   @restrict const dlong *scatterIds,
			   @restrict           T *q) {

  for(dlong k=0;k<K;++k;@outer(1)){
    for(dlong b=0;b<(Ngather+p_blockSize-1)/p_blockSize;++b;@outer(0)){
      
      for(dlong n=0;n<p_blockSize;++n;@inner(0)){
	
	const dlong row = n + p_blockSize*b;

	if(row<Ngather){
	  const dlong rowStart = gatherStarts[row]  ;
	  const dlong rowEnd   = gatherStarts[row+1];

	  // assume symmetric 
	  T gq = OGS_OP_INIT;
	  for (dlong i=rowStart;i<rowEnd;i++) {
	    OGS_OP  (gq, q[k+K*gatherIds[i]]);
	  } 
	  
#if 0
	  const dlong colStart = scatterStarts[row]  ;
	  const dlong colEnd   = scatterStarts[row+1];
	  
	  for (dlong i=colStart;i<colEnd;i++) {
	    q[k+K*scatterIds[i]] = gq;
	  }
#else
	  // no really - assume symmetry
	  for (dlong i=rowStart;i<rowEnd;i++) {
	    q[k+K*gatherIds[i]] = gq;
	  }
#endif
	}
      }
    }
  }

}
#endif



// number of warps per thread-block
//#define p_Nwarp 4
#define p_Nwarp 6
// number of threads per warp
#define p_Ntpw 32
// number of threads per gather
#define p_Ntpg 1
// number of gathers per warp
#define p_Ngpw (p_Ntpw/p_Ntpg)
// number of gathers per thread-block
#define p_Ngptb (p_Nwarp*p_Ngpw)
// mask for threads in warp engaging in shfl
#define p_mask 0xffffffff

// this allows different gather and scatter lists
#if 0
@kernel void gatherScatter(const dlong Ngather,
			   const dlong Nblocks,
                           const int K,
			   @restrict const dlong *blockStarts,
                           @restrict const  dlong *  gatherStarts,
                           @restrict const  dlong *  gatherIds,
                           @restrict const  dlong *  scatterStarts,
                           @restrict const  dlong *  scatterIds,
                           @restrict T *  q){
  
  for(dlong b=0;b<(Ngather+p_Ngptb-1)/p_Ngptb;++b;@outer(0)){
    
    for(dlong w=0;w<p_Nwarp;++w;@inner(2)){
      for(dlong g=0;g<p_Ngpw;++g;@inner(1)){
        for(dlong t=0;t<p_Ntpg;++t;@inner(0)){
          
          int n = g + w*p_Ngpw + b*p_Ngptb;
          if(n<Ngather){
            
            const dlong startG = gatherStarts[n];
            const dlong endG = gatherStarts[n+1];

            const dlong startS = scatterStarts[n];
            const dlong endS = scatterStarts[n+1];
	    
            T gq = 0;
            
	    //	    if((startG+1)!=endG) do not omit this because the gathers might be longer than the scatters
            {
              // gather
              dlong m = startG + t;
              while(m<endG){
                const dlong id = gatherIds[m];
                gq += q[id];
                m+=p_Ntpg;
              }
              
              // following assumes number of thread per gather is a power of 2, at most 32 total (i.e. <= warp size)
              // it uses shfl down sync to gather the row sum
              // then it uses a broadcast for each row sum
#if 0   
#if p_Ntpg>16
              gq += __shfl_down_sync(p_mask, gq, 16);
#endif
#if p_Ntpg>8
              gq += __shfl_down_sync(p_mask, gq, 8);
#endif
#if p_Ntpg>4
              gq += __shfl_down_sync(p_mask, gq, 4);
#endif
#if p_Ntpg>2
              gq += __shfl_down_sync(p_mask, gq, 2);
#endif
#if p_Ntpg>1
              gq += __shfl_down_sync(p_mask, gq, 1);
              gq = __shfl_sync(p_mask, gq, g*p_Ntpg); // broadcast to all threads in subwarp
#endif
#else


#if p_Ntpg>1
	      auto grp = item_.get_sub_group();
	      int l = g*p_Ntpg +t;
#if p_Ntpg>8	      
              gq += sycl::select_from_group(grp, gq, l+8);
#endif
#if p_Ntpg>4
              gq += sycl::select_from_group(grp, gq, l+4);
#endif
#if p_Ntpg>2
              gq += sycl::select_from_group(grp, gq, l+2);
#endif	
              gq += sycl::select_from_group(grp, gq, l+1);
	      gq =  sycl::select_from_group(grp, gq, g*p_Ntpg);
#endif      
	      
#endif
            }
          
	    //            if((startS+1)!=endS){
	    {
              // scatter
              dlong m = startS + t;
              while(m<endS){
                const dlong id = scatterIds[m];
                q[id] = gq;
                m+=p_Ntpg;
              }
            }
          }
        }
      }
    }
  }
}

#endif

#if 1
// use same gather and scatter
@kernel void gatherScatter(const dlong Ngather,
			   const dlong Nblocks,
                           const int K,
			   @restrict const dlong *blockStarts,
                           @restrict const  dlong *  gatherStarts,
                           @restrict const  dlong *  gatherIds,
                           @restrict const  dlong *  scatterStarts,
                           @restrict const  dlong *  scatterIds,
                           @restrict T *  q){
  
  for(dlong b=0;b<(Ngather+p_Ngptb-1)/p_Ngptb;++b;@outer(0)){
    
    for(dlong w=0;w<p_Nwarp;++w;@inner(2)){
      for(dlong g=0;g<p_Ngpw;++g;@inner(1)){
        for(dlong t=0;t<p_Ntpg;++t;@inner(0)){
          
          int n = g + w*p_Ngpw + b*p_Ngptb;
          if(n<Ngather){
            
            const dlong startG = gatherStarts[n];
            const dlong endG = gatherStarts[n+1];

            T gq = 0;
            
	    if((startG+1)!=endG) 
            {
              // gather
              dlong m = startG + t;
              while(m<endG){
                const dlong id = gatherIds[m];
                gq += q[id];
                m+=p_Ntpg;
              }
              
              // following assumes number of thread per gather is a power of 2, at most 32 total (i.e. <= warp size)
              // it uses shfl down sync to gather the row sum
              // then it uses a broadcast for each row sum
#if 0   
#if p_Ntpg>16
              gq += __shfl_down_sync(p_mask, gq, 16);
#endif
#if p_Ntpg>8
              gq += __shfl_down_sync(p_mask, gq, 8);
#endif
#if p_Ntpg>4
              gq += __shfl_down_sync(p_mask, gq, 4);
#endif
#if p_Ntpg>2
              gq += __shfl_down_sync(p_mask, gq, 2);
#endif
#if p_Ntpg>1
              gq += __shfl_down_sync(p_mask, gq, 1);
              gq = __shfl_sync(p_mask, gq, g*p_Ntpg); // broadcast to all threads in subwarp
#endif
#else


#if p_Ntpg>1
	      auto grp = item_.get_sub_group();
	      int l = g*p_Ntpg +t;
#if p_Ntpg>16	     
              gq += sycl::select_from_group(grp, gq, l+16);
#endif
#if p_Ntpg>8	      
              gq += sycl::select_from_group(grp, gq, l+8);
#endif
#if p_Ntpg>4
              gq += sycl::select_from_group(grp, gq, l+4);
#endif
#if p_Ntpg>2
              gq += sycl::select_from_group(grp, gq, l+2);
#endif	
              gq += sycl::select_from_group(grp, gq, l+1);
	      gq =  sycl::select_from_group(grp, gq, g*p_Ntpg);
#endif      
	      
#endif
              // scatter
              m = startG + t;
              while(m<endG){
                const dlong id = gatherIds[m];
                q[id] = gq;
                m+=p_Ntpg;
              }
            }
          }
        }
      }
    }
  }
}

#endif

/*------------------------------------------------------------------------------
  The basic gather kernel
------------------------------------------------------------------------------*/

#if OCCA_USE_DPCPP!=1
@kernel void gather(const dlong Ngather,
		    const dlong Nblocks,
                    const int K,
		    @restrict const dlong *blockStarts,
		    @restrict const dlong *gatherStarts,
		    @restrict const dlong *gatherIds,
		    @restrict const     T *q,
		    @restrict           T *gatherq){
  
  for(dlong k=0;k<K;++k;@outer(1)){
    for(dlong b=0;b<Nblocks;++b;@outer(0)){
      @exclusive dlong blockStart, blockEnd, start;

      @shared T temp[p_gatherNodesPerBlock];

      for(dlong n=0;n<p_blockSize;++n;@inner(0)){
        blockStart = blockStarts[b];
        blockEnd   = blockStarts[b+1];

        start = gatherStarts[blockStart];

        for (dlong id=start+n;id<gatherStarts[blockEnd];id+=p_blockSize) {
          temp[id-start] = q[k+gatherIds[id]*K];
        }
      }

      for(dlong n=0;n<p_blockSize;++n;@inner(0)){
        for (dlong row=blockStart+n;row<blockEnd;row+=p_blockSize) {
	  T gq = OGS_OP_INIT;

	  const dlong rowStart = gatherStarts[row]  -start;
	  const dlong rowEnd   = gatherStarts[row+1]-start;

	  for (dlong i=rowStart;i<rowEnd;i++) {
	    OGS_OP(gq,temp[i]);
	  }
          gatherq[k+row*K] = gq;
        }
      }
    }
  }
}
#else
// For DPCPP we avoid LDS
@kernel void gather(const dlong Ngather,
		    const dlong Nblocks,
                    const int K,
		    @restrict const dlong *blockStarts,
		    @restrict const dlong *gatherStarts,
		    @restrict const dlong *gatherIds,
		    @restrict const     T *q,
		    @restrict           T *gatherq){

#if 0
  for(dlong k=0;k<K;++k;@outer(1)){
    for(dlong b=0;b<Nblocks;++b;@outer(0)){

      for(dlong n=0;n<p_blockSize;++n;@inner(0)){

	const dlong blockStart = blockStarts[b];
        const dlong blockEnd   = blockStarts[b+1];
	
        for (dlong row=blockStart+n;row<blockEnd;row+=p_blockSize) {
	  T gq = OGS_OP_INIT;

	  const dlong rowStart = gatherStarts[row]  ;
	  const dlong rowEnd   = gatherStarts[row+1];

	  for (dlong i=rowStart;i<rowEnd;i++) {
	    OGS_OP(gq, q[k+K*gatherIds[i]]);
	  }
	  gatherq[k+row*K] = gq;
	}
      }
    }
  }
#else
  for(dlong k=0;k<K;++k;@outer(1)){
    for(dlong b=0;b<(Ngather+p_blockSize-1)/p_blockSize;++b;@outer(0)){

      for(dlong n=0;n<p_blockSize;++n;@inner(0)){

	const dlong row = b*p_blockSize + n;

	if(row<Ngather){
	  T gq = OGS_OP_INIT;
	  
	  const dlong rowStart = gatherStarts[row]  ;
	  const dlong rowEnd   = gatherStarts[row+1];
	  
	  for (dlong i=rowStart;i<rowEnd;i++) {
	    OGS_OP(gq, q[k+K*gatherIds[i]]);
	  }
	  gatherq[k+row*K] = gq;
	}
      }
    }
  }
#endif
}
#endif

/*------------------------------------------------------------------------------
  The basic scatter kernel
------------------------------------------------------------------------------*/
#if OCCA_USE_DPCPP!=1
@kernel void scatter(const dlong Nscatter,
		     const dlong Nblocks,
                     const int K,
                     @restrict const dlong *blockStarts,
                     @restrict const dlong *scatterStarts,
                     @restrict const dlong *scatterIds,
                     @restrict const     T *gatherq,
                     @restrict           T *q) {

  for(dlong k=0;k<K;++k;@outer(1)){
    for(dlong b=0;b<Nblocks;++b;@outer(0)){
      @exclusive dlong rowStart, rowEnd;
      @shared T temp[p_gatherNodesPerBlock];

      for(dlong n=0;n<p_blockSize;++n;@inner(0)){
        rowStart = blockStarts[b];
        rowEnd   = blockStarts[b+1];
        dlong idStart = scatterStarts[rowStart];
        dlong row = n+rowStart;
        while (row<rowEnd) {
          const int colStart = scatterStarts[row]  -idStart;
          const int colEnd   = scatterStarts[row+1]-idStart;
          T foo = gatherq[k+row*K];
          for (int i=colStart;i<colEnd;i++) {
            temp[i] = foo;
          }
          row += p_blockSize;
        }
      }

      for(dlong n=0;n<p_blockSize;++n;@inner(0)){
        const dlong row = scatterStarts[rowStart]+n;
        for (dlong i=0;row+i<scatterStarts[rowEnd];i+=p_blockSize) {
          q[k+scatterIds[row+i]*K] = temp[i+n];
        }
      }
    }
  }
}
#else
// For DPCPP avoid LDS
@kernel void scatter(const dlong Nscatter,
		     const dlong Nblocks,
                     const int K,
                     @restrict const dlong *blockStarts,
                     @restrict const dlong *scatterStarts,
                     @restrict const dlong *scatterIds,
                     @restrict const     T *gatherq,
                     @restrict           T *q) {

#if 0
  for(dlong k=0;k<K;++k;@outer(1)){
    for(dlong b=0;b<Nblocks;++b;@outer(0)){
      
      for(dlong n=0;n<p_blockSize;++n;@inner(0)){
	
	const dlong blockStart = blockStarts[b];
	const dlong blockEnd   = blockStarts[b+1];
	
	for (dlong row=blockStart+n;row<blockEnd;row+=p_blockSize) {
	  // load value to scatter
	  const T foo = gatherq[k+row*K];
	  
	  const dlong rowStart = scatterStarts[row]  ;
	  const dlong rowEnd   = scatterStarts[row+1];
	  
	  for(dlong i=rowStart;i<rowEnd;++i){
	    q[k+scatterIds[i]*K] = foo;
	  }
	}
      }
    }
  }
#else
  for(dlong k=0;k<K;++k;@outer(1)){
    for(dlong b=0;b<(Nscatter+p_blockSize-1)/p_blockSize;++b;@outer(0)){
      
      for(dlong n=0;n<p_blockSize;++n;@inner(0)){
	
	const dlong row = b*p_blockSize + n;

	if(row<Nscatter){
	  const dlong rowStart = scatterStarts[row]  ;
	  const dlong rowEnd   = scatterStarts[row+1];
	  
	  // load value to scatter
	  const T foo = gatherq[k+row*K];
	  
	  for(dlong i=rowStart;i<rowEnd;++i){
	    q[k+scatterIds[i]*K] = foo;
	  }
	}
      }
    }
  }
#endif
}
#endif


//extract sparse entries from vector
@kernel void extract(const dlong N,
                     const int K,
                     @restrict const dlong *ids,
                     @restrict const T *q,
                           @restrict T *gatherq) {
  for(dlong n=0;n<N*K;++n;@tile(p_blockSize, @outer(0), @inner(0))){
    const dlong gid = n/K;
    const int k = n%K;
    gatherq[n] = q[k+ids[gid]*K];
  }
}

