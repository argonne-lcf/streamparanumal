/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/


// default to element-per-threadblock
#define BK5_v0 BK5

@kernel void BK5_v0(const dlong Nelements,
		    @restrict const  dfloat *  ggeo,
		    @restrict const  dfloat *  D,
		    const dfloat lambda,
		    @restrict const  dfloat *  q,
		    @restrict dfloat *  Aq){

  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_q[p_Nq][p_Nq];

    @shared dfloat s_Gqr[p_Nq][p_Nq];
    @shared dfloat s_Gqs[p_Nq][p_Nq];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_Aq[p_Nq];// array for results Au(i,j,0:N)

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;

    // array of threads
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq*j+i]; // D is column major

        // load pencil of u into register
        const dlong base = i + j*p_Nq + e*p_Np;
        for(int k = 0; k < p_Nq; k++) {
          r_q[k] = q[base + k*p_Nq*p_Nq]; // prefetch operation
          r_Aq[k] = 0.f; // zero the accumulator
        }
      }
    }

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0;k < p_Nq; k++){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  // prefetch geometric factors
	  const dlong gbase = e*p_Nggeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

	  r_G00 = ggeo[gbase+p_G00ID*p_Np];
	  r_G01 = ggeo[gbase+p_G01ID*p_Np];
	  r_G02 = ggeo[gbase+p_G02ID*p_Np];

	  r_G11 = ggeo[gbase+p_G11ID*p_Np];
	  r_G12 = ggeo[gbase+p_G12ID*p_Np];
	  r_G22 = ggeo[gbase+p_G22ID*p_Np];

	  r_GwJ = ggeo[gbase+p_GWJID*p_Np];
	}
      }

      @barrier("local");

      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  // share u(:,:,k)
	  s_q[j][i] = r_q[k];

	  r_qt = 0;

#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; m++) {
	    r_qt += s_D[k][m]*r_q[m];
	  }
	}
      }

      @barrier("local");

      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  dfloat qr = 0.f;
	  dfloat qs = 0.f;

#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; m++) {
	    qr += s_D[i][m]*s_q[j][m];
	    qs += s_D[j][m]*s_q[m][i];
	  }

	  s_Gqs[j][i] = (r_G01*qr + r_G11*qs + r_G12*r_qt);
	  s_Gqr[j][i] = (r_G00*qr + r_G01*qs + r_G02*r_qt);

	  // put this here for a performance bump
	  r_Gqt = (r_G02*qr + r_G12*qs + r_G22*r_qt);
	  r_Auk = r_GwJ*lambda*r_q[k];
	}
      }

      @barrier("local");

      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; m++){
	    r_Auk   += s_D[m][j]*s_Gqs[m][i];
	    r_Aq[m] += s_D[k][m]*r_Gqt; // DT(m,k)*ut(i,j,k,e)
	    r_Auk   += s_D[m][i]*s_Gqr[j][m];
	  }

	  r_Aq[k] += r_Auk;
	}
      }
    }

    // write out

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
#pragma unroll p_Nq
	for(int k = 0; k < p_Nq; k++){
	  const dlong id = e*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
	  Aq[id] = r_Aq[k];
	}
      }
    }
  }
}



@kernel void BK5_v1(const dlong Nelements,
		    @restrict const  dfloat *  ggeo,
		    @restrict const  dfloat *  D,
		    const dfloat lambda,
		    @restrict const  dfloat *  q,
		    @restrict dfloat *  Aq){

  for(int ko=0;ko<p_Nq;++ko;@outer(1)){
    for(dlong e=0; e<Nelements; ++e; @outer(0)){
      
      @shared dfloat s_D[p_Nq][p_Nq];
      @shared dfloat s_q[p_Nq][p_Nq];
      
      @shared dfloat s_Gqr[p_Nq][p_Nq];
      @shared dfloat s_Gqs[p_Nq][p_Nq];
      
      @exclusive dfloat r_qt, r_Auko;
      @exclusive dfloat r_q[p_Nq]; // register array to hold u(i,j,0:N) private to thread
      
      @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;
      
      // array of threads
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  //load D into local memory
	  // s_D[i][j] = d \phi_i at node j
	  s_D[j][i] = D[p_Nq*j+i]; // D is column major
	  
	  // load pencil of u into register
	  const dlong base = i + j*p_Nq + e*p_Np;
	  for(int k = 0; k < p_Nq; k++) {
	    r_q[k] = q[base + k*p_Nq*p_Nq]; // prefetch operation
	  }

	  r_Auko = 0;
	}
      }
      
      // Layer by layer
#pragma unroll p_Nq
      for(int k = 0;k < p_Nq; k++){
	for(int j=0;j<p_Nq;++j;@inner(1)){
	  for(int i=0;i<p_Nq;++i;@inner(0)){
	      
	    // prefetch geometric factors
	    const dlong gbase = e*p_Nggeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

	    if(k==ko){
	      r_G00 = ggeo[gbase+p_G00ID*p_Np];
	      r_G01 = ggeo[gbase+p_G01ID*p_Np];
	      r_G11 = ggeo[gbase+p_G11ID*p_Np];
	      r_GwJ = ggeo[gbase+p_GWJID*p_Np];
	    }
	      
	    r_G02 = ggeo[gbase+p_G02ID*p_Np];
	    r_G12 = ggeo[gbase+p_G12ID*p_Np];
	    r_G22 = ggeo[gbase+p_G22ID*p_Np];	      

	  }
	}
	  
	@barrier("local");
	  
	for(int j=0;j<p_Nq;++j;@inner(1)){
	  for(int i=0;i<p_Nq;++i;@inner(0)){
	      
	    // share u(:,:,k)
	    s_q[j][i] = r_q[k];
	      
	    r_qt = 0;
	      
#pragma unroll p_Nq
	    for(int m = 0; m < p_Nq; m++) {
	      r_qt += s_D[k][m]*r_q[m];
	    }
	  }
	}
	  
	@barrier("local");
	  
	for(int j=0;j<p_Nq;++j;@inner(1)){
	  for(int i=0;i<p_Nq;++i;@inner(0)){
	      
	    dfloat qr = 0.f;
	    dfloat qs = 0.f;
	      
#pragma unroll p_Nq
	    for(int m = 0; m < p_Nq; m++) {
	      qr += s_D[i][m]*s_q[j][m];
	      qs += s_D[j][m]*s_q[m][i];
	    }
	      
	    // put this here for a performance bump
	    const dfloat r_Gqt = (r_G02*qr + r_G12*qs + r_G22*r_qt);
	    r_Auko += s_D[k][ko]*r_Gqt; // DT(m,k)*ut(i,j,k,e)

	    if(k==ko){
	      s_Gqs[j][i] = (r_G01*qr + r_G11*qs + r_G12*r_qt);
	      s_Gqr[j][i] = (r_G00*qr + r_G01*qs + r_G02*r_qt);
	      r_Auko += r_GwJ*lambda*r_q[k];
	    }
	  }
	}
	  
	@barrier("local");
	  
	for(int j=0;j<p_Nq;++j;@inner(1)){
	  for(int i=0;i<p_Nq;++i;@inner(0)){

	    if(k==ko){
#pragma unroll p_Nq
	      for(int m = 0; m < p_Nq; m++){
		r_Auko   += s_D[m][j]*s_Gqs[m][i];
		r_Auko   += s_D[m][i]*s_Gqr[j][m];
	      }
	    }
	  }
	}
      }
      
      // write out
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  const dlong id = e*p_Np +ko*p_Nq*p_Nq+ j*p_Nq + i;
	  Aq[id] = r_Auko;
	}
      }
    }
  }
}


@kernel void BK5CubeKernel(const int numElements,
			   @restrict const dfloat *op,
			   @restrict const dfloat *D,
			   const dfloat lambda,
			   @restrict const dfloat *solIn,
			   @restrict dfloat * solOut){

  for(int element=0;element<numElements;++element;@outer(0)){
  
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_p[p_Nq][p_Nq][p_Nq];
    
    @exclusive dfloat r_Ap, r_Gpr, r_Gps, r_Gpt;
    
    for(int k=0;k<p_Nq;++k;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  
	  if(k==0)
	    s_D[j][i] = D[j*p_Nq+i];
	  
	  int id = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;

	  const int gbase = element*p_Nggeo*p_Np + i + j*p_Nq + k*p_Nq*p_Nq;
	  dfloat GWJ = op[gbase+p_GWJID*p_Np];	  
	  
	  dfloat r_p = solIn[id];
	  s_p[k][j][i] = r_p;

	  r_Ap = GWJ*lambda*r_p;	  
	}
      }
    }
    
    for(int k=0;k<p_Nq;++k;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  
	  dfloat G00 = 0, G01 =0, G02 =0, G11 =0, G12 =0, G22 =0, GWJ =0;
	  
	  // prefetch geometric factors
	  const int gbase = element*p_Nggeo*p_Np + i + j*p_Nq + k*p_Nq*p_Nq;
	  
	  G00 = op[gbase+p_G00ID*p_Np];
	  G01 = op[gbase+p_G01ID*p_Np];
	  G02 = op[gbase+p_G02ID*p_Np];
	  G11 = op[gbase+p_G11ID*p_Np];
	  G12 = op[gbase+p_G12ID*p_Np];
	  G22 = op[gbase+p_G22ID*p_Np];
  
	  dfloat pr = 0.f;
	  dfloat ps = 0.f;
	  dfloat pt = 0.f;
	  
#pragma unroll
	  for(int m = 0; m < p_Nq; m++) {
	    pr += s_D[i][m]*s_p[k][j][m];
	    ps += s_D[j][m]*s_p[k][m][i];
	    pt += s_D[k][m]*s_p[m][j][i];
	  }
	  
	  r_Gpr = (G00*pr + G01*ps + G02*pt);
	  r_Gps = (G01*pr + G11*ps + G12*pt);
	  r_Gpt = (G02*pr + G12*ps + G22*pt);
	}
      }
    }

    for(int k=0;k<p_Nq;++k;@inner(2))
      for(int j=0;j<p_Nq;++j;@inner(1))
	for(int i=0;i<p_Nq;++i;@inner(0))
	  s_p[k][j][i] = r_Gpr;


    for(int k=0;k<p_Nq;++k;@inner(2))
      for(int j=0;j<p_Nq;++j;@inner(1))
	for(int i=0;i<p_Nq;++i;@inner(0)){
#pragma unroll
	  for(int m = 0; m < p_Nq; m++){
	    r_Ap += s_D[m][i]*s_p[k][j][m];
	  }
	}
    
    for(int k=0;k<p_Nq;++k;@inner(2))
      for(int j=0;j<p_Nq;++j;@inner(1))
	for(int i=0;i<p_Nq;++i;@inner(0))
	  s_p[k][j][i] = r_Gps;


    for(int k=0;k<p_Nq;++k;@inner(2))
      for(int j=0;j<p_Nq;++j;@inner(1))
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  
#pragma unroll
	  for(int m = 0; m < p_Nq; m++){
	    r_Ap += s_D[m][j]*s_p[k][m][i];
	  }
	}

    for(int k=0;k<p_Nq;++k;@inner(2))
      for(int j=0;j<p_Nq;++j;@inner(1))
	for(int i=0;i<p_Nq;++i;@inner(0))
	  s_p[k][j][i] = r_Gpt;

    for(int k=0;k<p_Nq;++k;@inner(2))
      for(int j=0;j<p_Nq;++j;@inner(1))
	for(int i=0;i<p_Nq;++i;@inner(0)){
#pragma unroll
	  for(int m = 0; m < p_Nq; m++){
	    r_Ap += s_D[m][k]*s_p[m][j][i];
	  }

	  int id = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;
	  solOut[id] = r_Ap;
	}
  }

}
