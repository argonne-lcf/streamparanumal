/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

#define BK9_v00 BK9

#define raiseDegreeHex3D(s_I, r_p)		\
  {						\
						\
  for(int b=0;b<p_NqV;++b;@inner(1)){		\
    for(int a=0;a<p_NqV;++a;@inner(0)){		\
      if(a<p_NqP && b<p_NqP){			\
	for(int k=0;k<p_NqV;++k){		\
	  dfloat res = 0;			\
	  for(int c=0;c<p_NqP;++c){		\
	    res += s_I[k][c]*r_p[c];		\
	  }					\
	  s_Ip[k][b][a] = res;			\
	}					\
      }						\
    }						\
  }						\
  						\
  @barrier("local");				\
  						\
  /* raise in b */				\
  for(int k=0;k<p_NqV;++k;@inner(1)){		\
    for(int a=0;a<p_NqV;++a;@inner(0)){		\
      						\
      if(a<p_NqP){				\
	for(int b=0;b<p_NqP;++b){		\
	  r_p[b] = s_Ip[k][b][a];		\
	}					\
						\
	for(int j=0;j<p_NqV;++j){		\
	  dfloat res = 0;			\
	  for(int b=0;b<p_NqP;++b){		\
	    res += s_I[j][b]*r_p[b];		\
	  }					\
	  s_Ip[k][j][a] = res;			\
	}					\
      }						\
    }						\
  }						\
						\
  @barrier("local");				\
						\
  /* raise in a */				\
  for(int k=0;k<p_NqV;++k;@inner(1)){		\
    for(int j=0;j<p_NqV;++j;@inner(0)){		\
      for(int a=0;a<p_NqP;++a){			\
	r_p[a] = s_Ip[k][j][a];			\
      }						\
						\
      for(int i=0;i<p_NqV;++i){			\
	dfloat res = 0;				\
	for(int a=0;a<p_NqP;++a){		\
	  res += s_I[i][a]*r_p[a];		\
	}					\
	s_Ip[k][j][i] = res;			\
      }						\
    }						\
  }						\
  						\
  @barrier("local");				\
  						\
  /* copy back to registers */			\
  for(int j=0;j<p_NqV;++j;@inner(1)){		\
    for(int i=0;i<p_NqV;++i;@inner(0)){		\
      for(int k=0;k<p_NqV;++k){			\
	r_p[k] = s_Ip[k][j][i];			\
      }						\
    }						\
  }						\
  						\
  @barrier("local");				\
						\
  }						\

#define lowerDegreeHex3D(s_I, r_p)		\
  {						\
						\
  /* lower in 'k' */				\
  for(int j=0;j<p_NqV;++j;@inner(1)){		\
    for(int i=0;i<p_NqV;++i;@inner(0)){		\
						\
      for(int c=0;c<p_NqP;++c){			\
	dfloat res = 0;				\
	for(int k=0;k<p_NqV;++k){		\
	  res += s_I[k][c]*r_p[k];		\
	}					\
	s_Ip[c][j][i] = res;			\
      }						\
    }						\
  }						\
						\
  @barrier("local");				\
						\
  /* lower in 'j' */				\
  for(int c=0;c<p_NqV;++c;@inner(1)){		\
    for(int i=0;i<p_NqV;++i;@inner(0)){		\
						\
      if(c<p_NqP){				\
	for(int j=0;j<p_NqV;++j){		\
	  r_p[j] = s_Ip[c][j][i];		\
	}					\
						\
	for(int b=0;b<p_NqP;++b){		\
	  dfloat res = 0;			\
	  for(int j=0;j<p_NqV;++j){		\
	    res += s_I[j][b]*r_p[j];		\
	  }					\
						\
	  s_Ip[c][b][i] = res;			\
	}					\
      }						\
    }						\
  }						\
						\
  @barrier("local");				\
						\
  /* lower in 'i' */				\
  for(int c=0;c<p_NqV;++c;@inner(1)){		\
    for(int b=0;b<p_NqV;++b;@inner(0)){		\
						\
      if(b<p_NqP && c<p_NqP){			\
	for(int i=0;i<p_NqV;++i){		\
	  r_p[i] = s_Ip[c][b][i];		\
	}					\
						\
	for(int a=0;a<p_NqP;++a){		\
	  dfloat res = 0;			\
	  for(int i=0;i<p_NqV;++i){		\
	    res += s_I[i][a]*r_p[i];		\
	  }					\
						\
	  s_Ip[c][b][a] = res;			\
	}					\
      }						\
    }						\
  }						\
						\
  @barrier("local");				\
						\
  /* copy back to registers */			\
  for(int b=0;b<p_NqV;++b;@inner(1)){		\
    for(int a=0;a<p_NqV;++a;@inner(0)){		\
      if(a<p_NqP && b<p_NqP){			\
	for(int c=0;c<p_NqP;++c){		\
	  r_p[c] = s_Ip[c][b][a];		\
	}					\
      }						\
    }						\
  }						\
						\
  @barrier("local");				\
						\
  }						


@kernel void BK9_v00(const dlong Nelements,
		     const dlong offset,
		     @restrict const dfloat *vgeo,
		     @restrict const dfloat *D,
		     @restrict const dfloat *I,
		     const dfloat lambda,
		     @restrict const dfloat *eta,
		     @restrict const dfloat *q,
		     @restrict dfloat *Aq){
  
  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared dfloat s_Ip[p_NqV][p_NqV][p_NqV];	
    
    @shared dfloat s_D[p_NqV][p_NqV];
    @shared dfloat s_I[p_NqV][p_NqP];

    @shared dfloat s_U[p_NqV][p_NqV];
    @shared dfloat s_V[p_NqV][p_NqV];
    @shared dfloat s_W[p_NqV][p_NqV];

    @shared dfloat s_GUr[p_NqV][p_NqV];
    @shared dfloat s_GUs[p_NqV][p_NqV];
    @shared dfloat s_GVr[p_NqV][p_NqV];
    @shared dfloat s_GVs[p_NqV][p_NqV];
    @shared dfloat s_GWr[p_NqV][p_NqV];
    @shared dfloat s_GWs[p_NqV][p_NqV];

    @exclusive dfloat r_Ut, r_Vt, r_Wt;

    // heavy on registers (FP64, 2*3*8 for N=7)
    @exclusive dfloat r_U[p_NqV] , r_V[p_NqV],  r_W[p_NqV], r_p[p_NqV];
    @exclusive dfloat r_AU[p_NqV], r_AV[p_NqV], r_AW[p_NqV];

    // array of threads
    for(int j=0;j<p_NqV;++j;@inner(1)){
      for(int i=0;i<p_NqV;++i;@inner(0)){

        s_D[j][i] = D[p_NqV*j+i]; 

	if(i<p_NqP){
	  s_I[j][i] = I[p_NqP*j+i];
	}
	
        // load pencil of u into register
        const dlong base = i + j*p_NqV + e*p_NpV;
	
        for(int k = 0; k < p_NqV; k++) {
          r_U[k] = q[base + k*p_NqV*p_NqV + 0*offset];
          r_V[k] = q[base + k*p_NqV*p_NqV + 1*offset];
          r_W[k] = q[base + k*p_NqV*p_NqV + 2*offset];

          r_AU[k] = 0.f; // zero the accumulator
          r_AV[k] = 0.f; // zero the accumulator
          r_AW[k] = 0.f; // zero the accumulator
        }

	if(i<p_NqP && j<p_NqP){
	  const dlong baseP = i + j*p_NqP + e*p_NpP + 3*offset;
	  for(int c = 0; c < p_NqP; c++) {
	    r_p[c] = q[baseP + c*p_NqP*p_NqP];
	  }
	}
      }
    }

    // raise pressure degree
    raiseDegreeHex3D(s_I, r_p);
    
    // Layer by layer
#pragma unroll p_NqV
    for(int k = 0;k < p_NqV; k++){

      @barrier("local");

      for(int j=0;j<p_NqV;++j;@inner(1)){
        for(int i=0;i<p_NqV;++i;@inner(0)){

          // share u(:,:,k)
          s_U[j][i] = r_U[k];
          s_V[j][i] = r_V[k];
          s_W[j][i] = r_W[k];

          r_Ut = 0;
          r_Vt = 0;
          r_Wt = 0;

#pragma unroll p_NqV
          for(int m = 0; m < p_NqV; m++) {
            // 1 shared, 6 flops => 12*6/(1*8) = 9 TFLOPSs > peak
            dfloat Dkm = s_D[k][m];
            r_Ut += Dkm*r_U[m];
            r_Vt += Dkm*r_V[m];
            r_Wt += Dkm*r_W[m];
          }
        }
      }

      @barrier("local");

      for(int j=0;j<p_NqV;++j;@inner(1)){
        for(int i=0;i<p_NqV;++i;@inner(0)){

          dfloat Ur = 0.f, Us = 0.f;
          dfloat Vr = 0.f, Vs = 0.f;
          dfloat Wr = 0.f, Ws = 0.f;

#pragma unroll p_NqV
          for(int m = 0; m < p_NqV; m++) {
            // 8 shared, 12 FLOPS => 12TB/s*12/(8*8) => 2.25TF on V100
            dfloat Dim = s_D[i][m];
            dfloat Djm = s_D[j][m];

            Ur += Dim*s_U[j][m];
            Us += Djm*s_U[m][i];

            Vr += Dim*s_V[j][m];
            Vs += Djm*s_V[m][i];

            Wr += Dim*s_W[j][m];
            Ws += Djm*s_W[m][i];
          }

          const dlong pid = i + j*p_NqV + k*p_NqV*p_NqV + e*p_NpV;

	  // use raised pressure
	  const dfloat pk = r_p[k];

	  const dfloat eta_kji = eta[pid];
	  
          // prefetch geometric factors
          const dlong gbase = e*p_Nvgeo*p_NpV + k*p_NqV*p_NqV + j*p_NqV + i;

          const dfloat rx = vgeo[gbase+p_RXID*p_NpV];
          const dfloat sx = vgeo[gbase+p_SXID*p_NpV];
          const dfloat tx = vgeo[gbase+p_TXID*p_NpV];

          const dfloat ry = vgeo[gbase+p_RYID*p_NpV];
          const dfloat sy = vgeo[gbase+p_SYID*p_NpV];
          const dfloat ty = vgeo[gbase+p_TYID*p_NpV];

          const dfloat rz = vgeo[gbase+p_RZID*p_NpV];
          const dfloat sz = vgeo[gbase+p_SZID*p_NpV];
          const dfloat tz = vgeo[gbase+p_TZID*p_NpV];

          const dfloat JW = vgeo[gbase+p_JWID*p_NpV];

          const dfloat G00 = (rx*rx+ry*ry+rz*rz)*JW*eta_kji;
          const dfloat G01 = (rx*sx+ry*sy+rz*sz)*JW*eta_kji;
          const dfloat G02 = (rx*tx+ry*ty+rz*tz)*JW*eta_kji;
          const dfloat G11 = (sx*sx+sy*sy+sz*sz)*JW*eta_kji;
          const dfloat G12 = (sx*tx+sy*ty+sz*tz)*JW*eta_kji;
          const dfloat G22 = (tx*tx+ty*ty+tz*tz)*JW*eta_kji;

          const dfloat JWpk = -JW*pk;

          // (grad phi, grad U - delta_x p)
          // (grad phi, grad V - delta_y p)
          // (grad phi, grad W - delta_z p)
          s_GUr[j][i] = (G00*Ur + G01*Us + G02*r_Ut) + rx*JWpk;
          s_GVr[j][i] = (G00*Vr + G01*Vs + G02*r_Vt) + ry*JWpk;
          s_GWr[j][i] = (G00*Wr + G01*Ws + G02*r_Wt) + rz*JWpk;

          s_GUs[j][i] = (G01*Ur + G11*Us + G12*r_Ut) + sx*JWpk;
          s_GVs[j][i] = (G01*Vr + G11*Vs + G12*r_Vt) + sy*JWpk;
          s_GWs[j][i] = (G01*Wr + G11*Ws + G12*r_Wt) + sz*JWpk;

          // (phi, divU)
          dfloat APk = 0;
          APk += rx*Ur + sx*Us + tx*r_Ut;
          APk += ry*Vr + sy*Vs + ty*r_Vt;
          APk += rz*Wr + sz*Ws + tz*r_Wt;

	  r_p[k] = -JW*APk;

          r_Ut = G02*Ur + G12*Us + G22*r_Ut + tx*JWpk;
          r_Vt = G02*Vr + G12*Vs + G22*r_Vt + ty*JWpk;
          r_Wt = G02*Wr + G12*Ws + G22*r_Wt + tz*JWpk;

          r_AU[k] += JW*lambda*r_U[k];
          r_AV[k] += JW*lambda*r_V[k];
          r_AW[k] += JW*lambda*r_W[k];

        }
      }

      @barrier("local");

      for(int j=0;j<p_NqV;++j;@inner(1)){
        for(int i=0;i<p_NqV;++i;@inner(0)){

          dfloat AUtmp = 0, AVtmp = 0, AWtmp = 0;

#pragma unroll p_NqV
          for(int m = 0; m < p_NqV; m++){
            // 9 shared, 18 flops => 12TB/s*18/(9*8) = 3TFLOPS/s
            dfloat Dmi = s_D[m][i];
            dfloat Dmj = s_D[m][j];
            dfloat Dkm = s_D[k][m];

            AUtmp += Dmi*s_GUr[j][m];
            AUtmp += Dmj*s_GUs[m][i];

            AVtmp += Dmi*s_GVr[j][m];
            AVtmp += Dmj*s_GVs[m][i];

            AWtmp += Dmi*s_GWr[j][m];
            AWtmp += Dmj*s_GWs[m][i];

            r_AU[m] += Dkm*r_Ut;
            r_AV[m] += Dkm*r_Vt;
            r_AW[m] += Dkm*r_Wt;
          }

          r_AU[k] += AUtmp;
          r_AV[k] += AVtmp;
          r_AW[k] += AWtmp;
        }
      }
    }

    // lower pressure degree
    lowerDegreeHex3D(s_I, r_p);
    
    // write out
    
    for(int j=0;j<p_NqV;++j;@inner(1)){
      for(int i=0;i<p_NqV;++i;@inner(0)){
#pragma unroll p_NqV
        for(int k = 0; k < p_NqV; k++){
          const dlong id = e*p_NpV +k*p_NqV*p_NqV+ j*p_NqV + i;
          Aq[id+0*offset] = r_AU[k];
          Aq[id+1*offset] = r_AV[k];
          Aq[id+2*offset] = r_AW[k];
        }
	
	if(i<p_NqP && j<p_NqP){
	  for(int c = 0; c < p_NqP; c++){
	    const dlong id = e*p_NpP +c*p_NqP*p_NqP+ j*p_NqP + i + 3*offset;
	    Aq[id] = r_p[c];
	  }
	}
      }
    }
  }
}


@kernel void BK9_v01(const dlong Nelements,
		     const dlong offset,
		     @restrict const dfloat *vgeo,
		     @restrict const dfloat *D,
		     @restrict const dfloat *I,
		     const dfloat lambda,
		     @restrict const dfloat *eta,
		     @restrict const dfloat *q,
		     @restrict dfloat *Aq)
{
  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared dfloat s_Ip[p_NqV][p_NqV][p_NqV];	
    
    @shared dfloat s_D[p_NqV][p_NqV];
    @shared dfloat s_I[p_NqV][p_NqP];
       
    @shared dfloat s_U[p_NqV][p_NqV][p_NqV];
    @shared dfloat s_V[p_NqV][p_NqV][p_NqV];
    @shared dfloat s_W[p_NqV][p_NqV][p_NqV];

    @shared dfloat s_GUr[p_NqV][p_NqV];
    @shared dfloat s_GUs[p_NqV][p_NqV];
    @shared dfloat s_GVr[p_NqV][p_NqV];
    @shared dfloat s_GVs[p_NqV][p_NqV];
    @shared dfloat s_GWr[p_NqV][p_NqV];
    @shared dfloat s_GWs[p_NqV][p_NqV];
    
    // heavy on registers (FP64, 2*3*8 for N=7)
    @exclusive dfloat r_AU[p_NqV], r_AV[p_NqV], r_AW[p_NqV], r_p[p_NqV];

    // array of threads
    for(int j=0;j<p_NqV;++j;@inner(1)){
      for(int i=0;i<p_NqV;++i;@inner(0)){

        s_D[j][i] = D[p_NqV*j+i]; 

	if(i<p_NqP){
	  s_I[j][i] = I[p_NqP*j+i];
	}
	
	// load pencil of u into register
	const dlong base = i + j*p_NqV + e*p_NpV;
	
#pragma unroll p_NqV
        for(int k = 0; k < p_NqV; k++) {
          s_U[k][j][i] = q[base + k*p_NqV*p_NqV + 0*offset];
          s_V[k][j][i] = q[base + k*p_NqV*p_NqV + 1*offset];
          s_W[k][j][i] = q[base + k*p_NqV*p_NqV + 2*offset];

          r_AU[k] = 0.f; // zero the accumulator
          r_AV[k] = 0.f; // zero the accumulator
          r_AW[k] = 0.f; // zero the accumulator
        }

	if(i<p_NqP && j<p_NqP){
	  const dlong baseP = i + j*p_NqP + e*p_NpP + 3*offset;
	  for(int c = 0; c < p_NqP; c++) {
	    r_p[c] = q[baseP + c*p_NqP*p_NqP];
	  }
	}
      }
    }

    // raise pressure degree
    raiseDegreeHex3D(s_I, r_p);
    
    // Layer by layer
#pragma unroll p_NqV
    for(int k = 0;k < p_NqV; k++){

      @barrier("local");

      for(int j=0;j<p_NqV;++j;@inner(1)){
        for(int i=0;i<p_NqV;++i;@inner(0)){

          dfloat Ur = 0.f, Us = 0.f, Ut = 0.f;
          dfloat Vr = 0.f, Vs = 0.f, Vt = 0.f;
          dfloat Wr = 0.f, Ws = 0.f, Wt = 0.f;

#pragma unroll p_NqV
          for(int m = 0; m < p_NqV; m++) {
            // 12 shared, 18 flops => 12TB*18/(12*8) = 2.25TFLOPS/s
            dfloat Dim = s_D[i][m];
            dfloat Djm = s_D[j][m];
	    dfloat Dkm = s_D[k][m];

            Ur += Dim*s_U[k][j][m];
	    Vr += Dim*s_V[k][j][m];
            Wr += Dim*s_W[k][j][m];
	    
            Us += Djm*s_U[k][m][i];
	    Vs += Djm*s_V[k][m][i];
            Ws += Djm*s_W[k][m][i];
	    
	    Ut += Dkm*s_U[m][j][i];
	    Vt += Dkm*s_V[m][j][i];
	    Wt += Dkm*s_W[m][j][i];
          }

          const dlong pid = i + j*p_NqV + k*p_NqV*p_NqV + e*p_NpV;

	  const dfloat pk = r_p[k];

	  const dfloat eta_kji = eta[pid];
	  
          // prefetch geometric factors
          const dlong gbase = e*p_Nvgeo*p_NpV + k*p_NqV*p_NqV + j*p_NqV + i;

          const dfloat rx = vgeo[gbase+p_RXID*p_NpV];
          const dfloat sx = vgeo[gbase+p_SXID*p_NpV];
          const dfloat tx = vgeo[gbase+p_TXID*p_NpV];

          const dfloat ry = vgeo[gbase+p_RYID*p_NpV];
          const dfloat sy = vgeo[gbase+p_SYID*p_NpV];
          const dfloat ty = vgeo[gbase+p_TYID*p_NpV];

          const dfloat rz = vgeo[gbase+p_RZID*p_NpV];
          const dfloat sz = vgeo[gbase+p_SZID*p_NpV];
          const dfloat tz = vgeo[gbase+p_TZID*p_NpV];

          const dfloat JW = vgeo[gbase+p_JWID*p_NpV];

          // (phi, divU)
          dfloat APk = 0;
          APk += rx*Ur + sx*Us + tx*Ut;
          APk += ry*Vr + sy*Vs + ty*Vt;
          APk += rz*Wr + sz*Ws + tz*Wt;

	  r_p[k] = -JW*APk;
	  
          const dfloat JWpk = -JW*pk;

          // (grad phi, grad U - delta_x p)
          // (grad phi, grad V - delta_y p)
          // (grad phi, grad W - delta_z p)
          const dfloat G00 = (rx*rx+ry*ry+rz*rz)*JW*eta_kji;
          const dfloat G01 = (rx*sx+ry*sy+rz*sz)*JW*eta_kji;
          const dfloat G02 = (rx*tx+ry*ty+rz*tz)*JW*eta_kji;
	  
          s_GUr[j][i] = (G00*Ur + G01*Us + G02*Ut) + rx*JWpk;
          s_GVr[j][i] = (G00*Vr + G01*Vs + G02*Vt) + ry*JWpk;
          s_GWr[j][i] = (G00*Wr + G01*Ws + G02*Wt) + rz*JWpk;

          const dfloat G11 = (sx*sx+sy*sy+sz*sz)*JW*eta_kji;
          const dfloat G12 = (sx*tx+sy*ty+sz*tz)*JW*eta_kji;
	  
          s_GUs[j][i] = (G01*Ur + G11*Us + G12*Ut) + sx*JWpk;
          s_GVs[j][i] = (G01*Vr + G11*Vs + G12*Vt) + sy*JWpk;
          s_GWs[j][i] = (G01*Wr + G11*Ws + G12*Wt) + sz*JWpk;

          const dfloat G22 = (tx*tx+ty*ty+tz*tz)*JW*eta_kji;
	  
          const dfloat r_Ut = G02*Ur + G12*Us + G22*Ut + tx*JWpk;
          const dfloat r_Vt = G02*Vr + G12*Vs + G22*Vt + ty*JWpk;
          const dfloat r_Wt = G02*Wr + G12*Ws + G22*Wt + tz*JWpk;
	  
#pragma unroll p_NqV
          for(int m = 0; m < p_NqV; m++){
	    dfloat Dkm = s_D[k][m];
            r_AU[m] += Dkm*r_Ut;
            r_AV[m] += Dkm*r_Vt;
            r_AW[m] += Dkm*r_Wt;
	  }
	  
          r_AU[k] += JW*lambda*s_U[k][j][i];
          r_AV[k] += JW*lambda*s_V[k][j][i];
          r_AW[k] += JW*lambda*s_W[k][j][i];	 
	  
        }
      }

      @barrier("local");

      for(int j=0;j<p_NqV;++j;@inner(1)){
        for(int i=0;i<p_NqV;++i;@inner(0)){

          dfloat AUtmp = 0, AVtmp = 0, AWtmp = 0;

#pragma unroll p_NqV
          for(int m = 0; m < p_NqV; m++){
            // 9 shared, 18 flops => 12TB/s*18/(9*8) = 3TFLOPS/s
            dfloat Dmi = s_D[m][i];
            dfloat Dmj = s_D[m][j];	     

            AUtmp += Dmi*s_GUr[j][m];
	    AVtmp += Dmi*s_GVr[j][m];
            AWtmp += Dmi*s_GWr[j][m];
	    
            AUtmp += Dmj*s_GUs[m][i];
            AVtmp += Dmj*s_GVs[m][i];
            AWtmp += Dmj*s_GWs[m][i];
          }

          r_AU[k] += AUtmp;
          r_AV[k] += AVtmp;
          r_AW[k] += AWtmp;
        }
      }
    }

    // lower pressure degree
    lowerDegreeHex3D(s_I, r_p);
    
    // write out

    for(int j=0;j<p_NqV;++j;@inner(1)){
      for(int i=0;i<p_NqV;++i;@inner(0)){

#pragma unroll p_NqV
        for(int k = 0; k < p_NqV; k++){
          const dlong id = e*p_NpV +k*p_NqV*p_NqV+ j*p_NqV + i;
          Aq[id+0*offset] = r_AU[k];
          Aq[id+1*offset] = r_AV[k];
          Aq[id+2*offset] = r_AW[k];
        }
	
	if(i<p_NqP && j<p_NqP){
	  for(int c = 0; c < p_NqP; c++){
	    const dlong id = e*p_NpP +c*p_NqP*p_NqP+ j*p_NqP + i + 3*offset;
	    Aq[id] = r_p[c];
	  }
	}
      }
    }
  }
}

