/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

#define BK2_v00 BK2

#define interpolateHex3D(s_I, r_p)		\
  {						\
  						\
    for(int b=0;b<p_cubNq;++b;@inner(1)){		\
      for(int a=0;a<p_cubNq;++a;@inner(0)){		\
	if(a<p_Nq && b<p_Nq){				\
	  for(int k=0;k<p_cubNq;++k){			\
	    dfloat res = 0;				\
	    for(int c=0;c<p_Nq;++c){			\
	      res += s_I[k][c]*r_p[c];			\
	    }						\
	    s_Ip[k][b][a] = res;			\
	  }						\
	}						\
      }							\
    }							\
    							\
    /* raise in b */					\
    for(int k=0;k<p_cubNq;++k;@inner(1)){		\
      for(int a=0;a<p_cubNq;++a;@inner(0)){		\
							\
	if(a<p_Nq){					\
	  for(int b=0;b<p_Nq;++b){			\
	    r_p[b] = s_Ip[k][b][a];			\
	  }						\
	  						\
	  for(int j=0;j<p_cubNq;++j){			\
	    dfloat res = 0;				\
	    for(int b=0;b<p_Nq;++b){			\
	      res += s_I[j][b]*r_p[b];			\
	    }						\
	    s_Ip[k][j][a] = res;			\
	  }						\
	}						\
      }							\
    }							\
    							\
    /* raise in a */					\
    for(int k=0;k<p_cubNq;++k;@inner(1)){		\
      for(int j=0;j<p_cubNq;++j;@inner(0)){		\
	for(int a=0;a<p_Nq;++a){			\
	  r_p[a] = s_Ip[k][j][a];			\
	}						\
							\
	for(int i=0;i<p_cubNq;++i){			\
	  dfloat res = 0;				\
	  for(int a=0;a<p_Nq;++a){			\
	    res += s_I[i][a]*r_p[a];			\
	  }						\
	  s_Ip[k][j][i] = res;				\
	}						\
      }							\
    }							\
    							\
    /* copy back to registers */			\
    for(int j=0;j<p_cubNq;++j;@inner(1)){		\
      for(int i=0;i<p_cubNq;++i;@inner(0)){		\
	for(int k=0;k<p_cubNq;++k){			\
	  r_p[k] = s_Ip[k][j][i];			\
	}						\
      }							\
    }							\
  }							\
    
#define testHex3D(s_I, r_p)				\
  {							\
    /* lower in 'k' */					\
    for(int j=0;j<p_cubNq;++j;@inner(1)){		\
      for(int i=0;i<p_cubNq;++i;@inner(0)){		\
      							\
	for(int c=0;c<p_Nq;++c){			\
	  dfloat res = 0;				\
	  for(int k=0;k<p_cubNq;++k){			\
	    res += s_I[k][c]*r_p[k];			\
	  }						\
	  s_Ip[c][j][i] = res;				\
	}						\
      }							\
    }							\
    							\
    /* lower in 'j' */					\
    for(int c=0;c<p_cubNq;++c;@inner(1)){		\
      for(int i=0;i<p_cubNq;++i;@inner(0)){		\
							\
	if(c<p_Nq){					\
	  for(int j=0;j<p_cubNq;++j){			\
	    r_p[j] = s_Ip[c][j][i];			\
	  }						\
	  						\
	  for(int b=0;b<p_Nq;++b){			\
	    dfloat res = 0;				\
	    for(int j=0;j<p_cubNq;++j){			\
	      res += s_I[j][b]*r_p[j];			\
	    }						\
	    						\
	    s_Ip[c][b][i] = res;			\
	  }						\
	}						\
      }							\
    }							\
    							\
    /* lower in 'i' */					\
    for(int c=0;c<p_cubNq;++c;@inner(1)){		\
      for(int b=0;b<p_cubNq;++b;@inner(0)){		\
							\
	if(b<p_Nq && c<p_Nq){				\
	  for(int i=0;i<p_cubNq;++i){			\
	    r_p[i] = s_Ip[c][b][i];			\
	  }						\
	  						\
	  for(int a=0;a<p_Nq;++a){			\
	    dfloat res = 0;				\
	    for(int i=0;i<p_cubNq;++i){			\
	      res += s_I[i][a]*r_p[i];			\
	    }						\
	    						\
	    s_Ip[c][b][a] = res;			\
	  }						\
	}						\
      }							\
    }							\
							\
    /* copy back to registers */			\
    for(int b=0;b<p_cubNq;++b;@inner(1)){		\
      for(int a=0;a<p_cubNq;++a;@inner(0)){		\
	if(a<p_Nq && b<p_Nq){				\
	  for(int c=0;c<p_Nq;++c){			\
	    r_p[c] = s_Ip[c][b][a];			\
	  }						\
	}						\
      }							\
    }							\
  }						


@kernel void BK2_v00(const dlong Nelements,
		     const dlong offset,
		     @restrict const dfloat *ggeo,
		     @restrict const dfloat *I,
		     @restrict const dfloat *q,
		     @restrict dfloat *Aq){
  
  for(dlong e=0; e<Nelements; ++e; @outer(0)){
    
    @shared dfloat s_Ip[p_cubNq][p_cubNq][p_cubNq];	
    
    @shared dfloat s_I[p_cubNq][p_Nq];
    
    @exclusive dfloat r_U[p_cubNq];
    @exclusive dfloat r_V[p_cubNq];
    @exclusive dfloat r_W[p_cubNq];
    
    // array of threads
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	
	if(i<p_Nq){
	  s_I[j][i] = I[p_Nq*j+i];
	}
	
        // load pencil of u into register
        const dlong base = i + j*p_Nq + e*p_Np;
	
	if(i<p_Nq && j<p_Nq){
	  for(int k = 0; k < p_Nq; k++) {
	    r_U[k] = q[base + k*p_Nq*p_Nq + 0*offset];
	    r_V[k] = q[base + k*p_Nq*p_Nq + 1*offset];
	    r_W[k] = q[base + k*p_Nq*p_Nq + 2*offset];
	  }
	}
      }
    }

    // raise pressure degree
    interpolateHex3D(s_I, r_U);
    interpolateHex3D(s_I, r_V);
    interpolateHex3D(s_I, r_W);
      
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
#pragma unroll p_cubNq
	for(int k = 0;k < p_cubNq; k++){
          // prefetch geometric factors
          const dlong gbase = e*p_Nggeo*p_cubNp + k*p_cubNq*p_cubNq + j*p_cubNq + i;
          const dfloat GWJ = ggeo[gbase+p_GWJID*p_cubNp];
	  r_U[k] *= GWJ;
	  r_V[k] *= GWJ;
	  r_W[k] *= GWJ;
        }
      }    
    }
    
    // lower pressure degree
    testHex3D(s_I, r_U);
    testHex3D(s_I, r_V);
    testHex3D(s_I, r_W);
    
    // write out
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	
	if(i<p_Nq && j<p_Nq){
#pragma unroll p_cubNq
	  for(int k = 0; k < p_Nq; k++){
	    const dlong id = e*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
	    Aq[id+0*offset] = r_U[k];
	    Aq[id+1*offset] = r_V[k];
	    Aq[id+2*offset] = r_W[k];
	  }
	}
      }
    }
  }
}


@kernel void BK2_v01(const dlong Nelements,
		     const dlong offset,
		     @restrict const dfloat *ggeo,
		     @restrict const dfloat *I,
		     @restrict const dfloat *q,
		     @restrict dfloat *Aq)
{
  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared dfloat s_Ip[p_cubNq][p_cubNq][p_cubNq];	
    
    @shared dfloat s_I[p_cubNq][p_Nq];
       
    @exclusive dfloat r_U[p_cubNq];
    @exclusive dfloat r_V[p_cubNq];
    @exclusive dfloat r_W[p_cubNq];

    // array of threads
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){

	if(i<p_Nq){
	  s_I[j][i] = I[p_Nq*j+i];
	}
	
	// load pencil of u into register
	const dlong base = i + j*p_Nq + e*p_Np;

	if(i<p_Nq && j<p_Nq){
#pragma unroll p_cubNq
	  for(int k = 0; k < p_Nq; k++) {
	    r_U[k]  = q[base + k*p_Nq*p_Nq + 0*offset];
	    r_V[k]  = q[base + k*p_Nq*p_Nq + 1*offset];
	    r_W[k]  = q[base + k*p_Nq*p_Nq + 2*offset];
	  }
	}
      }
    }

    // raise pressure degree
    interpolateHex3D(s_I, r_U);
    interpolateHex3D(s_I, r_V);
    interpolateHex3D(s_I, r_W);

    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	
#pragma unroll p_cubNq
	for(int k = 0;k < p_cubNq; k++){
	  
	  // prefetch geometric factors
	  const dlong gbase = e*p_Nggeo*p_cubNp + k*p_cubNq*p_cubNq + j*p_cubNq + i;
	  const dfloat GWJ = ggeo[gbase+p_GWJID*p_cubNp];
	  
	  r_U[k] *= GWJ;
	  r_V[k] *= GWJ;
	  r_W[k] *= GWJ;
	}
      }
    }
    
    testHex3D(s_I, r_U);
    testHex3D(s_I, r_V);
    testHex3D(s_I, r_W);
    
    // write out
    
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	
	if(i<p_Nq && j<p_Nq){
#pragma unroll p_cubNq
	  for(int k = 0; k < p_Nq; k++){
	    const dlong id = e*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
	    Aq[id+0*offset] = r_U[k];
	    Aq[id+1*offset] = r_V[k];
	    Aq[id+2*offset] = r_W[k];
	  }
	}
      }
    }
  }
}

