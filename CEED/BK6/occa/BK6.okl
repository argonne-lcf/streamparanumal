/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/


// default to element-per-threadblock

@kernel void BK6(const dlong Nelements,
		 const dlong offset,
		 const dfloat lambda,
		 @restrict const  dlong  *  elementList,
		 @restrict const  dfloat *  ggeo,
		 @restrict const  dfloat *  D,
		 @restrict const  dfloat *  q,
		 @restrict dfloat *  Aq){

  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_u[p_Nq][p_Nq];
    @shared dfloat s_v[p_Nq][p_Nq];
    @shared dfloat s_w[p_Nq][p_Nq];

    @shared dfloat s_Gur[p_Nq][p_Nq];
    @shared dfloat s_Gus[p_Nq][p_Nq];
    @shared dfloat s_Gvr[p_Nq][p_Nq];
    @shared dfloat s_Gvs[p_Nq][p_Nq];
    @shared dfloat s_Gwr[p_Nq][p_Nq];
    @shared dfloat s_Gws[p_Nq][p_Nq];

    @exclusive dfloat r_ut, r_Gut, r_Auk;
    @exclusive dfloat r_vt, r_Gvt, r_Avk;
    @exclusive dfloat r_wt, r_Gwt, r_Awk;

    @exclusive dfloat r_u[p_Nq],  r_v[p_Nq], r_w[p_Nq];
    @exclusive dfloat r_Au[p_Nq], r_Av[p_Nq], r_Aw[p_Nq];

    @exclusive dlong element;

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;

    // array of threads
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //load D into local memory
        s_D[j][i] = D[p_Nq*j+i];
	
        // load pencil of u into registers
        element = elementList[e];

	for(int k=0;k<p_Nq;++k){
	  const dlong base = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;

	  r_u[k] = q[base+offset*0];
	  r_v[k] = q[base+offset*1];
	  r_w[k] = q[base+offset*2]; 

	  r_Au[k] = 0.f;
	  r_Av[k] = 0.f;
	  r_Aw[k] = 0.f; 
	}
      }
    }

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0;k < p_Nq; k++){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  // prefetch geometric factors
	  const dlong gbase = element*p_Nggeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

	  r_G00 = ggeo[gbase+p_G00ID*p_Np];
	  r_G01 = ggeo[gbase+p_G01ID*p_Np];
	  r_G02 = ggeo[gbase+p_G02ID*p_Np];

	  r_G11 = ggeo[gbase+p_G11ID*p_Np];
	  r_G12 = ggeo[gbase+p_G12ID*p_Np];
	  r_G22 = ggeo[gbase+p_G22ID*p_Np];

	  r_GwJ = ggeo[gbase+p_GWJID*p_Np];
	}
      }
      
      @barrier("local");

      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  
	  // share u(:,:,k)
	  s_u[j][i] = r_u[k];
	  s_v[j][i] = r_v[k];
	  s_w[j][i] = r_w[k];

	  r_ut = 0;
	  r_vt = 0;
	  r_wt = 0;	  
	  
#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; m++) {
	    dfloat Dkm = s_D[k][m];
	    r_ut += Dkm*r_u[m];
	    r_vt += Dkm*r_v[m];
	    r_wt += Dkm*r_w[m];
	  }
	}
      }
      
      @barrier("local");
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  
	  dfloat ur = 0, vr = 0, wr = 0;
	  dfloat us = 0, vs = 0, ws = 0;
	  
#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; m++) {
	    dfloat Dim = s_D[i][m];
	    dfloat Djm = s_D[j][m];
	    
	    ur += Dim*s_u[j][m];
	    vr += Dim*s_v[j][m];
	    wr += Dim*s_w[j][m];
	    
	    us += Djm*s_u[m][i];
	    vs += Djm*s_v[m][i];
	    ws += Djm*s_w[m][i];
	  }
	  
	  s_Gur[j][i] = (r_G00*ur + r_G01*us + r_G02*r_ut);
	  s_Gvr[j][i] = (r_G00*vr + r_G01*vs + r_G02*r_vt);
	  s_Gwr[j][i] = (r_G00*wr + r_G01*ws + r_G02*r_wt);
	  
	  s_Gus[j][i] = (r_G01*ur + r_G11*us + r_G12*r_ut);
	  s_Gvs[j][i] = (r_G01*vr + r_G11*vs + r_G12*r_vt);
	  s_Gws[j][i] = (r_G01*wr + r_G11*ws + r_G12*r_wt);

	  r_Gut = (r_G02*ur + r_G12*us + r_G22*r_ut);
	  r_Gvt = (r_G02*vr + r_G12*vs + r_G22*r_vt);
	  r_Gwt = (r_G02*wr + r_G12*ws + r_G22*r_wt);
	  
	  r_Auk = r_GwJ*lambda*r_u[k];
	  r_Avk = r_GwJ*lambda*r_v[k];
	  r_Awk = r_GwJ*lambda*r_w[k];
	}
      }

      @barrier("local");

      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; m++){
	    dfloat Dmi = s_D[m][i];
	    dfloat Dmj = s_D[m][j];
	    dfloat Dkm = s_D[k][m];

	    r_Auk   += Dmj*s_Gur[m][i];
	    r_Avk   += Dmj*s_Gvr[m][i];
	    r_Awk   += Dmj*s_Gwr[m][i];

	    r_Auk   += Dmi*s_Gus[j][m];
	    r_Avk   += Dmi*s_Gvs[j][m];
	    r_Awk   += Dmi*s_Gws[j][m];
	    
	    r_Au[m] += Dkm*r_Gut;
	    r_Av[m] += Dkm*r_Gvt;
	    r_Aw[m] += Dkm*r_Gwt;
	  }

	  r_Au[k] += r_Auk;
	  r_Av[k] += r_Avk;
	  r_Aw[k] += r_Awk;
	}
      }
    }
    
    // write out
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
#pragma unroll p_Nq
	for(int k = 0; k < p_Nq; k++){
	  const dlong id = element*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
	  Aq[id+0*offset] = r_Au[k];
	  Aq[id+1*offset] = r_Av[k];
	  Aq[id+2*offset] = r_Aw[k];
	}
      }
    }
  }
}
